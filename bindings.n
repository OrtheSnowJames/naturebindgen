// Generated Nature bindings
// This file was automatically generated naturebindgen.

// Constants from Macros
ComplexStruct COMPLEX_VAL = ComplexStruct{info=ComplexStruct_nested_Struct{metric=newUnion_four_bytes(42),description="ok".ref()},position=Point{x=3,y=4}}
i32 FLAG_ENABLED = 1
i32 MAX_SIZE = 1024
anyptr VERSION = "1.0.0".ref()
Point point = Point{x=1,y=2}

// Enum Constants
int Color_RED = 1
int Color_GREEN = 2
int Color_BLUE = 3

// Union Definitions (as byte arrays)

type Union_eight_bytes = [u8;8]


fn newUnion_eight_bytes<T>(T value):Union_eight_bytes {
    u8 zero = 0 as u8
    Union_eight_bytes result = [zero,zero,zero,zero,zero,zero,zero,zero]
    result as anyptr as rawptr<T> as T = value
    return result
}
type Union_four_bytes = [u8;4]


fn newUnion_four_bytes<T>(T value):Union_four_bytes {
    u8 zero = 0 as u8
    Union_four_bytes result = [zero,zero,zero,zero]
    result as anyptr as rawptr<T> as T = value
    return result
}

// Struct Definitions
type Point = struct {
    i32 x
    i32 y
}

type Person = struct {
    [i8;50] name
    i32 age
}

type Container = struct {
    Container_nested_Struct point
    i32 id
}

type Container_nested_Struct = struct {
    i32 x
    i32 y
}

type Response = struct {
    Union_eight_bytes result
    i32 id
}

type ComplexStruct = struct {
    ComplexStruct_nested_Struct info
    Point position
}

type ComplexStruct_nested_Struct = struct {
    Union_four_bytes metric
    anyptr description
}


// Function Bindings
#linkid printf
fn printf(anyptr fmt, ...[any] args):i32

#linkid sprintf
fn sprintf(anyptr buf, anyptr fmt, ...[any] args):i32

#linkid do_callback
fn do_callback(anyptr reason, anyptr cb):i32

#linkid draw_point
fn draw_point(anyptr p)

#linkid draw_anything
fn draw_anything(anyptr data)

#linkid draw_string
fn draw_string(anyptr str)

#linkid process_person
fn process_person(anyptr person)
