// Generated Nature bindings
// This file was automatically generated by naturebindgen

// Constants
int unknown = 5

// Enum constants
int Color_C_ENUM_RED = 0
int Color_C_ENUM_BLUE = 1
int Color_C_ENUM_GREEN = 2
int ShapeType_C_ENUM_SHAPE_POINT = 0
int ShapeType_C_ENUM_SHAPE_LINE = 1
int ShapeType_C_ENUM_SHAPE_RECTANGLE = 2
int ShapeType_C_ENUM_SHAPE_CIRCLE = 3

// Type definitions
type ComplexCallback = fn(rawptr<CallbackData>, CallbackResult):i32

// Union definitions
type Union_sixteen_bytes = [u8;16]

type Union_twelve_bytes = [u8;12]

type Union_four_bytes = [u8;4]

type Union_eight_bytes = [u8;8]


// Struct definitions
type ShapeUnion = struct {
    Union_sixteen_bytes shape_data
    i32 shape_type
}

type CallbackResult = struct {
    i32 status
    anyptr message
}

type Point2D = struct {
    i32 x
    i32 y
}

type LogConfig = struct {
    i32 count
    anyptr format
}

type CallbackData = struct {
    i32 x
    i32 y
    anyptr name
}

type Point3D = struct {
    f32 x
    f32 y
    f32 z
}

type ColoredPoint_color_Struct = struct {
    u8 r
    u8 g
    u8 b
    u8 a
}

type ComplexShape = struct {
    ComplexShape_bounds_Struct bounds
    ComplexShape_metadata_Struct metadata
}

type VariantData = struct {
    Union_eight_bytes data
    i32 type_
}

type Union_sixteen_bytes_info_Struct = struct {
    anyptr name
    i32 id
}

type DeepNested = struct {
    DeepNested_outer_Struct outer
    i32 count
}

type MixedAnonymous = struct {
    MixedAnonymous_coordinates_Struct coordinates
    MixedAnonymous_info_Struct info
}

type Shape = struct {
    any type_
    Union_sixteen_bytes data
}

type Player = struct {
    i32 id
    [i8;100] name
    i32 age
    [i8;100] team
}

type Rectangle_dimensions_Struct = struct {
    i32 width
    i32 height
}

type ComplexShape_bounds_Struct_bottom_right_Struct = struct {
    i32 x
    i32 y
}

type ComplexShape_bounds_Struct = struct {
    ComplexShape_bounds_Struct_top_left_Struct top_left
    ComplexShape_bounds_Struct_bottom_right_Struct bottom_right
}

type DeepNested_outer_Struct = struct {
    DeepNested_outer_Struct_middle_Struct middle
    Point2D position
}

type MixedAnonymous_info_Struct = struct {
    anyptr name
    i32 id
}

type ArrayStruct_container_Struct_items_Struct = struct {
    anyptr name
    i32 value
}

type ArrayStruct_container_Struct = struct {
    i32 count
    [ArrayStruct_container_Struct_items_Struct;10] items
}

type AnonymousStruct = struct {
    i32 width
    i32 height
}

type Union_sixteen_bytes_point_Struct = struct {
    i32 x
    i32 y
}

type DeepNested_outer_Struct_middle_Struct = struct {
    DeepNested_outer_Struct_middle_Struct_inner_Struct inner
    f32 factor
}

type ArrayStruct_transform_Struct = struct {
    [f32;3] matrix
    Point3D origin
}

type ArrayStruct = struct {
    ArrayStruct_container_Struct container
    ArrayStruct_transform_Struct transform
}

type Point = struct {
    f32 x
    f32 y
}

type ComplexShape_metadata_Struct = struct {
    anyptr title
    i32 id
}

type FlexibleData = struct {
    Union_sixteen_bytes content
    i8 tag
}

type MultiUnionStruct = struct {
    Union_eight_bytes primary
    Union_twelve_bytes position
    Union_twelve_bytes color
}

type MixedAnonymous_coordinates_Struct = struct {
    Union_four_bytes coord_x
    Union_four_bytes coord_y
}

type Rectangle = struct {
    Rectangle_dimensions_Struct dimensions
    anyptr name
}

type ComplexShape_bounds_Struct_top_left_Struct = struct {
    i32 x
    i32 y
}

type DeepNested_outer_Struct_middle_Struct_inner_Struct = struct {
    i32 value
    anyptr description
}

type ColoredPoint = struct {
    ColoredPoint_color_Struct color
    Point2D position
}

type Union_sixteen_bytes_size_Struct = struct {
    i32 width
    i32 height
}

// Function bindings
#linkid draw_point
fn draw_point(rawptr<Point> point)

#linkid print_player
fn print_player(rawptr<Player> player)

#linkid print_color
fn print_color(any color)

#linkid log_message
fn log_message(rawptr<LogConfig> config, ...[any] args):i32

#linkid process_shape
fn process_shape(rawptr<Shape> shape)

#linkid handle_variant
fn handle_variant(rawptr<VariantData> variant)

#linkid transform_point
fn transform_point(rawptr<Point3D> point, [f32;3] matrix)

#linkid register_callback
fn register_callback(fn(rawptr<CallbackData>, CallbackResult):i32 callback):fn(rawptr<CallbackData>, CallbackResult):i32

#linkid calculate_area
fn calculate_area(rawptr<Rectangle> rect):i32

