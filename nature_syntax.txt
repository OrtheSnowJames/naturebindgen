# Nature Language Syntax - Binding Generation Reference

## Type System

### Numeric Types
| Type | Bytes | Description |
|------|-------|-------------|
| int | - | Signed integer, matches platform CPU bit width (8 bytes on 64-bit) |
| i8 | 1 | 8-bit signed integer |
| i16 | 2 | 16-bit signed integer |
| i32 | 4 | 32-bit signed integer |
| i64 | 8 | 64-bit signed integer |
| uint | - | Unsigned integer, matches platform CPU bit width |
| u8 | 1 | 8-bit unsigned integer |
| u16 | 2 | 16-bit unsigned integer |
| u32 | 4 | 32-bit unsigned integer |
| u64 | 8 | 64-bit unsigned integer |
| float | - | Floating-point, matches platform CPU bit width (equals f64 on 64-bit) |
| f32 | 4 | Single-precision floating-point |
| f64 | 8 | Double-precision floating-point |
| bool | 1 | Boolean type, values are true/false |

### Special Types
| Type Name | Description | Example |
|-----------|-------------|---------|
| anyptr | Unsafe integer pointer, equivalent to uintptr, used for C language interaction | Any type except float can be converted to anyptr using as |
| rawptr<T> | Unsafe nullable pointer. Use the & (load address) syntax to obtain a rawptr. Use * (indirect address / dereference) to access value | rawptr<int> len_ptr = &len |
| any | Container for any type, a special form of union type | any v = 42 |

### Composite Types
| Type Name | Storage Location | Syntax | Example | Description |
|-----------|-----------------|--------|---------|-------------|
| string | heap | string | string str = 'hello' | String type. Can use single quotes, double quotes, or backticks |
| vector | heap | [T] | [int] list = [1, 2, 3] | Dynamic array (vector) |
| array | stack | [T;n] | [int;3] a = [1,2,3] | Fixed-size array |
| struct | stack | struct | struct { int x } | Struct |

## Functions

### Function Definition
```nature
fn function_name(parameter_list):return_type {
    // Function body
}
```

### Function Types
The syntax for function types is `fn(parameter_types):return_type`:
```nature
// Defining a function type variable
fn(int,int):int calculator = fn(int a, int b):int {
     return a + b
}

// Function type as a parameter
fn apply(fn(int,int):int f, int x, int y):int {
    return f(x, y)
}
```

### Variadic Parameters
Functions support a variable number of parameters. Use the fixed format `...` + vec to create a variadic parameter.
```nature
fn sum(...[int] numbers):int {
    var result = 0
    for v in numbers {
        result += v
    }
    return result
}
```

## Structs

### Basic Syntax
```nature
// Struct declaration
type person = struct {
    string name
    int age
    bool active
}

// Struct initialization; p is initialized on the stack
var p = person{
    name = "Alice",
    age = 25,
}
```

### Type Definition
```nature
type my_int = int
type nullable<T> = T|null
```

## C Language Interaction

### Function Tags
Function tags are a special function declaration syntax used to add metadata to functions or modify their behavior. Tags start with the # symbol and must be placed before the function declaration.

#### linkid Tag
The #linkid tag is used to customize the linker symbol name of a function:
```nature
#linkid print_message
fn log(string message):void {
    // Function implementation
}
```

### Type Mapping
Mapping between nature and C types:

| nature Type | C Type | Description |
|-------------|--------|-------------|
| anyptr | uintptr | Universal pointer type |
| rawptr<T> | T* | Typed pointer |
| i8/u8 | int8_t/uint8_t | 8-bit integer |
| i16/u16 | int16_t/uint16_t | 16-bit integer |
| i32/u32 | int32_t/uint32_t | 32-bit integer |
| i64/u64 | int64_t/uint64_t | 64-bit integer |
| int | size_t | Platform-dependent integer, equivalent to int64_t on 64-bit systems |
| f32 | float | 32-bit floating-point number |
| f64 | double | 64-bit floating-point number |
| [T,n] | T[n] | Fixed-size array, N is a compile-time constant |

### Getting C-style strings and pointers:
```nature
// Get the address of a variable
var str = "hello"
anyptr ptr = str.ref()  // Get the string address

// Get a rawptr type
rawptr<tm_t> time_ptr = &time_info  // Get the address of a struct

// Get an anyptr type
anyptr c_ptr = time_info as anyptr // Any nature type can be converted to anyptr type
```

## Keywords

### Type Keywords
void, any, null, anyptr
bool, string
int, uint, float
i8, i16, i32, i64
u8, u16, u32, u64
f32, f64

### Declaration Keywords
var - variable declaration
type - type definition
fn - function definition

### Boolean Values
true
false

// Generated struct definition
type Point = struct {
    i32 x
    i32 y
}

// Usage examples:
var p = Point{x = 10, y = 20}           // Stack allocation
ptr<Point> p2 = new Point(x = 10, y = 20) // Heap allocation

Use rawptr for c interaction, and use anyptr for char* / char[]
